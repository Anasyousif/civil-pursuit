! function () {
  
  'use strict';

  var _ = {};

  function __ (n) {
    return _[n];
  }

  if ( ! process.env.SYNAPP_SELENIUM_TARGET ) {
    throw new Error('Missing SYNAPP_SELENIUM_TARGET');
  }

  require('mongoose').connect(process.env.MONGOHQ_URL);

  var User = require('../../business/models/User');
  var Item = require('../../business/models/Item');

  var stamp = Date.now();

  var subject = 'This is a test topic generated by Selenium ' + stamp;

  var description = 'This is a test topic generated by Selenium. This item has no reference and no image.';

  var testUser, testItem;

  module.exports = {
    "before": function (browser, done) { 
      User.disposable(function (error, user) {
        testUser = user;

        Item.create({
          type          :   'Topic',
          subject       :   'Test topic for test web/promote',
          description   :   'Description Description Description Description Description ',
          user          :   testUser._id,
        }, function (error, item) {
          testItem = item;

          _['item']               =   '#item-' + item._id;
          _['toggle promote']     =   _['item'] + ' .item-toggle-promote';
          _['promoted']           =   _['toggle promote'] + ' .promoted';
          _['evaluation cycle']   =   _['item'] + ' .promote';
          _['cursor']             =   _['evaluation cycle'] + ' .promote-steps .cursor';
          _['limit']              =   _['evaluation cycle'] + ' .promote-steps .limit';

          done();
        });
        
      });
    },

    "Promote" : function (browser) {
      
      browser.url(process.env.SYNAPP_SELENIUM_TARGET + '/item/' + testItem._id + '/test');

      browser.setCookie({
        name     : "synuser",
        value    : JSON.stringify({ email: testUser.email, id: testUser._id }),
        secure   : false,
      }, function (res) {
        if ( res.state !== 'success' ) {
          throw new Error('Could not set cookie');
        }
      });

      browser.refresh();
        
      browser

        .waitForElementVisible(     'body', 1000,     "Page is ready")

        .assert.visible(__(         'item'),          "Item should be visible")

        .assert.visible(__(         'toggle promote'),"Toggle promote view button should be visible")

        .click(__(                  'toggle promote'))

        .waitForElementVisible(__(  'evaluation cycle'), 2000, "Evaluation cycle should be visible")

        .assert.containsText(__(    'cursor'), '1',   "Cursor should be set to 1")

        .assert.containsText(__(    'limit'), '5',    "Limit should be set to 5")

        .pause(2500)
        
        .end();
    },

    "after": function (browser, done) {
      testUser.remove(function () {
        testItem.remove(function () {
          require('mongoose').disconnect();
          done();
        })
      });
    }
  };

} ();

